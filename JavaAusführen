#Falls das nicht auf dem Agamendon ausgef체hrt werden soll m체ssen die Pfade
/usr/lib/jvm/java-1.8.0-openjdk-amd64/include
und
/usr/lib/jvm/java-1.8.0-openjdk-amd64/include/linux
entsprechend euren Java-Pfaden ge채ndert werden (in den Ordnern ist jni.h bzw. jni_m.h)


#Das Zeug zu einer Libary kompilieren:

cd DER_PFAD_ZUM_PROJEKT
mkdir -p build
mkdir -p build/base
mkdir -p build/jni
cd build/base
g++ -c -I"/usr/lib/jvm/java-1.8.0-openjdk-amd64/include" -I"/usr/lib/jvm/java-1.8.0-openjdk-amd64/include/linux" -I"/tmp/tmp.cTlciDtCIj/include" -fPIC -DNVRTC_GET_TYPE_NAME=1 -std=c++17 -Dcurrent_log_level=loglevel::DEBUG1 -c ../../src/*.cpp
cd ../jni
g++ -c -I"/usr/lib/jvm/java-1.8.0-openjdk-amd64/include" -I"/usr/lib/jvm/java-1.8.0-openjdk-amd64/include/linux" -I"/tmp/tmp.cTlciDtCIj/include" -fPIC -DNVRTC_GET_TYPE_NAME=1 -std=c++17 -Dcurrent_log_level=loglevel::DEBUG1 -c ../../src/jni/*.cpp
cd ..
g++ -I"/usr/lib/jvm/java-1.8.0-openjdk-amd64/include" -I"/usr/lib/jvm/java-1.8.0-openjdk-amd64/include/linux" -I"/tmp/tmp.cTlciDtCIj/include" -shared -o libcudaexecutor-jni.so base/*.o jni/*.o -lcuda -lnvrtc


#Das Java-Zeug ausf체hren

cd DER_PFAD_ZUM_PROJEKT
cp ../src/java/*.java ../build/ 
cp ../examples/java/*.java ../build/
javac *.java
java -Djava.library.path=DER_PFAD_ZUM_PROJEKT/build/ NAME_DER_JAVA_KLASSE
